import streamlit as st
from collections import defaultdict

# 🚀 Local Modules
from modules.clause_parser import extract_text_from_pdf, extract_text_from_docx, chunk_text_into_clauses
from modules.clause_matcher import match_user_clauses
from modules.retriever import ClauseRetriever
from modules.utils import classify_clause_type
from modules.llm_utils import rewrite_clause, generate_negotiation_tip

# 📦 Caching
@st.cache_data
def get_parsed_clauses(file):
    if file.name.endswith(".pdf"):
        text = extract_text_from_pdf(file)
    else:
        text = extract_text_from_docx(file)
    return chunk_text_into_clauses(text)

@st.cache_resource
def get_cached_retriever():
    retriever = ClauseRetriever()
    retriever.build_index()
    return retriever

@st.cache_data
def rewrite_clause_cached(text):
    return rewrite_clause(text)

@st.cache_data
def generate_tip_cached(text):
    return generate_negotiation_tip(text)

# 🎨 Risk Label Display
def get_risk_color(risk_level):
    return {
        "low": "🟢 Low",
        "medium": "🟡 Medium",
        "high": "🔴 High"
    }.get(risk_level.lower(), risk_level)

# 📄 Summary Builder
def generate_summary_text(matched_clauses, retrieved_clauses, query, file_name):
    lines = ["# 📜 Contract Clause Summary\n"]
    lines.append(f"**Generated by GRAG System**\n**Contract Title:** _{file_name}_\n---\n")

    lines.append("## 🧠 Matched Clauses\n")
    for item in matched_clauses:
        lines.append(f"- Clause: {item['user_clause']}")
        lines.append(f"  - Similar Example: {item['similar_example']}")
        lines.append(f"  - Explanation: {item['explanation']}")
        lines.append(f"  - Risk: {item['risk_flag']}")
        lines.append(f"  - Simplified: {rewrite_clause_cached(item['user_clause'])}")
        lines.append(f"  - Negotiation Tip: {generate_tip_cached(item['user_clause'])}\n")

    lines.append(f"\n## 🔎 Retrieved Clauses for Query: \"{query}\"\n")
    for res in retrieved_clauses:
        lines.append(f"- Clause: {res['clause_text']}")
        lines.append(f"  - Explanation: {res['plain_explanation']}")
        lines.append(f"  - Risk: {res['risk_flag']}")
        lines.append(f"  - Simplified: {rewrite_clause_cached(res['clause_text'])}")
        lines.append(f"  - Negotiation Tip: {generate_tip_cached(res['clause_text'])}\n")

    return "\n".join(lines)

# 🌐 Page Config
st.set_page_config(page_title="📜 Contract Clause Explainer", layout="wide")
st.title("📜 Contract Clause Explainer")
st.write("Upload your agreement to simplify legal jargon and flag risky clauses.")

# 👤 Mode Toggle
mode = st.sidebar.radio("👤 Select Mode", ["Beginner", "Expert"])
risk_filter = st.sidebar.selectbox("⚠️ Filter by Risk Level", ["All", "Low", "Medium", "High"])

# 🔁 Query Enrichment Panel
st.sidebar.subheader("🔁 Query-to-LLM Enrichment")
custom_clause = st.sidebar.text_area("✏️ Enter a clause or concern:")
retrieved_for_custom = []

if custom_clause:
    st.sidebar.markdown("#### ✍️ Simplified Rewrite")
    st.sidebar.write(rewrite_clause_cached(custom_clause))

    st.sidebar.markdown("#### 🤝 Negotiation Tip")
    st.sidebar.write(generate_tip_cached(custom_clause))

    if mode == "Expert":
        st.sidebar.markdown("#### 🧠 Predicted Clause Type")
        st.sidebar.write(classify_clause_type(custom_clause))

        retriever = get_cached_retriever()
        retrieved_for_custom = retriever.retrieve_similar(custom_clause)

        st.sidebar.markdown("#### 📎 Relevant Clauses from Index")
        for res in retrieved_for_custom[:3]:
            st.sidebar.markdown(f"- {res['clause_text'][:100]}...")

# 📁 Upload and Parse File
uploaded_file = st.file_uploader("📁 Upload Contract", type=["pdf", "docx"])

if uploaded_file:
    with st.spinner("🔍 Parsing document..."):
        clauses = get_parsed_clauses(uploaded_file)

    st.success(f"✅ Extracted {len(clauses)} clauses.")
    st.subheader("📄 Sample Clauses")
    for i, clause in enumerate(clauses[:5]):
        st.markdown(f"**Clause {i+1}:** {clause}")

    # 🧠 Clause Matcher
    st.subheader("🧠 Retrieved Clause Insights")
    matched = match_user_clauses(clauses)
    filtered_matches = [
        item for item in matched
        if risk_filter == "All" or item["risk_flag"].lower() == risk_filter.lower()
    ]

    grouped_matches = defaultdict(list)
    for item in filtered_matches:
        clause_type = classify_clause_type(item["user_clause"])
        grouped_matches[clause_type].append(item)

    for clause_type, items in grouped_matches.items():
        st.markdown(f"### 🗂️ {clause_type} Clauses")
        for item in items[:5]:
            with st.expander(f"📌 {item['user_clause'][:60]}..."):
                st.markdown("#### 🔎 Matched Clause")
                st.markdown(item["user_clause"])

                if mode == "Expert":
                    st.markdown("#### 📄 Similar Example")
                    st.markdown(item["similar_example"])

                    st.markdown("#### 🧠 Explanation")
                    st.markdown(item["explanation"])

                    st.markdown("#### ⚠️ Risk Level")
                    st.markdown(get_risk_color(item["risk_flag"]))

                st.markdown("#### ✍️ Simplified Clause")
                st.markdown(rewrite_clause_cached(item["user_clause"]))

                st.markdown("#### 🤝 Negotiation Tip")
                st.markdown(generate_tip_cached(item["user_clause"]))

                col1, col2 = st.columns(2)
                with col1:
                    if st.button("👍 Helpful", key=f"up_{item['user_clause']}"):
                        st.toast("Glad it helped! 👍")
                with col2:
                    if st.button("👎 Not Clear", key=f"down_{item['user_clause']}"):
                        st.toast("Thanks for the feedback! 🙏")

    # 🔎 Clause Retriever
    st.subheader("💬 Clause Search")
    user_query = st.text_input("Type your query:", value="Can either side terminate the contract?")
    retrieved_results = []

    if user_query:
        retriever = get_cached_retriever()
        retrieved_results = retriever.retrieve_similar(user_query)

        for res in retrieved_results[:5]:
            with st.expander(f"📖 Match for: {user_query}"):
                st.markdown("#### 📄 Clause")
                st.markdown(res["clause_text"])

                if mode == "Expert":
                    st.markdown("#### 🧠 Explanation")
                    st.markdown(res["plain_explanation"])

                    st.markdown("#### ⚠️ Risk")
                    st.markdown(get_risk_color(res["risk_flag"]))

                st.markdown("#### ✍️ Simplified Clause")
                st.markdown(rewrite_clause_cached(res["clause_text"]))

                st.markdown("#### 🤝 Negotiation Tip")
                st.markdown(generate_tip_cached(res["clause_text"]))

    # 📥 Export Summary
    if matched and retrieved_results:
        summary_text = generate_summary_text(
            filtered_matches, retrieved_results, user_query, uploaded_file.name
        )
        st.subheader("📥 Download Clause Summary")
        st.download_button("📄 Export Summary", summary_text, file_name="clause_summary.txt")